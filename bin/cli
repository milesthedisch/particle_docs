#!/usr/bin/env node

const handlebars = require("handlebars");
const docopt = require("docopt");
const fs = require("fs-extra");
const path = require("path");

const usage = `
Usage: cli create example <name> [<libs>...]
`;

const options = docopt.docopt(usage);
const paths = {
  template: path.join(__dirname, "../views/templates/example.js.handlebars"),
  exampleDir: path.join(__dirname, "../examples"),
};

const exampleFile = fs.readFileSync(paths.template, "utf8");
const jsTemplate = handlebars.compile(exampleFile);
const name = path.join(paths.exampleDir, options["<name>"]);

handlebars.registerHelper("lib", function() {
  if (this.toString() === "Utils") {
    return `const ${this.toLowerCase()} = particleLib.${this};`;
  }

  if (this.toString() === "Shapes") {
    return `const ${this.toLowerCase()} = new particleLib.${this}(ctx, document);`;
  }

  return `const ${this.toLowerCase()} = new particleLib.${this}();`;
});

const createDir = (_path) => {
  return new Promise((resolve, reject) => {
    fs.ensureDir(_path, (err) => {
      if (err) return reject(err);
      return resolve(_path);
    });
  });
};

const createFile = (_path) => {
  const filePath = path.join(_path, "/main.js");

  let libs;
  if (!options["<libs>"].length) {
    libs = ["Utils", "Vector", "Shapes", "Particle"];
  }

  const data = jsTemplate(libs);

  return new Promise((resolve, reject) => {
    fs.writeFile(filePath, data, (err) => {
      if (err) return reject(err);
      return resolve(filePath);
    });
  });
};

const exampleExists = (file) =>
  fs.readdirSync(paths.exampleDir).indexOf(file) > -1;

if (exampleExists(options["<name>"])) {
  console.error("Example already exsits");
  process.exit(1);
} else {
  createDir(name)
    .then(createFile)
    .then((filePath) => {
      console.log(`Success!\nYour files has been written -> ${filePath}`);
    })
    .catch((err) => console.error(err));
}
